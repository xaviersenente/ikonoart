---
import { ClientRouter } from "astro:transitions";
import PasswordProtection from '../components/PasswordProtection.astro';
import { getCurrentLocale, useTranslations } from '../i18n/utils';
import type { Locale } from '../i18n/ui';

// import '@fontsource-variable/noto-sans';
// import '@fontsource-variable/noto-sans-jp';
// import '@fontsource-variable/plus-jakarta-sans';
import '@fontsource-variable/work-sans';
// import '@fontsource-variable/ibm-plex-sans';

import '../styles/global.css';

import { SEO } from "astro-seo";

import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";

// Définition stricte des props attendues
interface Props {
  title: string;
  description?: string;
  currentLocale?: Locale;
}

// Récupération de la langue actuelle avec fallback
const { title, description, currentLocale: propLocale } = Astro.props;
const currentLocale = propLocale || getCurrentLocale(Astro.currentLocale);
const t = useTranslations(currentLocale);

// Configuration des langues 
const localeConfig: Record<Locale, {
  siteName: string;
  separator: string;
}> = {
  'en': {
    siteName: t('site.name') || "Ikono Art",
    separator: " — "
  },
  'ja': {
    siteName: t('site.name') || "イコノアート",
    separator: " — "
  }
};

// Fonction pour nettoyer le pathname et extraire la partie après la langue
function getCleanPathname(pathname: string, locale: string): string {
  const cleanPath = pathname.replace(/\/$/, '');
  
  // Gestion des URLs avec préfixe de langue (/en/, /ja/)
  const localePrefix = `/${locale}`;
  if (cleanPath.startsWith(localePrefix)) {
    return cleanPath.substring(localePrefix.length) || '/';
  }
  
  return cleanPath || '/';
}

// Récupération du pathname nettoyé
const cleanPathname = getCleanPathname(Astro.url.pathname, currentLocale);

// Construction du titre de la page
const currentSiteName = localeConfig[currentLocale]?.siteName;
const separator = localeConfig[currentLocale]?.separator ?? " — ";

const titleHead: string = cleanPathname === '/' 
  ? currentSiteName 
  : `${title}${separator}${currentSiteName}`;

// Optionnel : récupération du nom de la page actuelle pour d'autres usages
const currentPage: string = cleanPathname === '/' 
  ? 'home'
  : cleanPathname.split('/').pop() ?? 'home';

// Meta description avec traductions
const metaDescription = description || t('meta.defaultDescription') || '';
---

<!doctype html>
<html class="scroll-smooth" lang={currentLocale} data-page={currentPage}>
	<head>
		<SEO
      title={titleHead}
      description={metaDescription}
      charset="UTF-8"
      openGraph={{
        basic: {
          title: titleHead,
          type: "image/jpeg",
          image: "/playersclub-og.jpg",
        },
      }}
      twitter={{
        // creator: "@codrops",
      }}
      extend={{
        // extending the default link tags
        link: [
          {
            rel: "icon",
            type: "image/png",
            sizes: "16x16",
            href: "/favicon/favicon-16x16.png",
          },
          {
            rel: "icon",
            type: "image/png",
            sizes: "32x32",
            href: "/favicon/favicon-32x32.png",
          },
          {
            rel: "apple-touch-icon",
            sizes: "180x180",
            href: "/favicon/apple-touch-icon.png",
          },
          { rel: "manifest", href: "/favicon/site.webmanifest" },
          { rel: "sitemap", href: "/sitemap-index.xml" },
        ],
        // extending the default meta tags
        meta: [
          { name: "twitter:image", content: "/playersclub-og.jpg" },
          { name: "twitter:title", content: titleHead },
          { name: "twitter:description", content: metaDescription },
          { name: "viewport", content: "width=device-width" },
          { name: "msapplication-TileColor", content: "#000000" },
          { name: "theme-color", content: "#ffffff" },
          { name: "generator", content: Astro.generator },
        ],
      }}
    />
		<ClientRouter />
	</head>
	<body>
    <!-- La protection par mot de passe -->
    {import.meta.env.PROD && <PasswordProtection />}
		<Header/>
    <slot />
		<Footer/>
	</body>
</html>