---
import Layout from '../../../layouts/Layout.astro';
import ArtistCard from '../../../components/ArtistCard.astro';
import { getArtistsGroupedByType } from "../../../services/collections";
import { generateI18nPaths, getCurrentLocale, usePageMeta, useTranslations } from '../../../i18n/utils';
import type { Locale } from '../../../i18n/ui';

// Génération des chemins statiques pour chaque langue
export const getStaticPaths = async () => {
  return generateI18nPaths();
}

// Récupération de la locale courante avec fallback
const currentLocale: Locale = getCurrentLocale(Astro.currentLocale);
const t = useTranslations(currentLocale);

// Récupération des métadonnées de page traduites
const { title, description } = usePageMeta(currentLocale, 'pageArtists');

// Récupération des artistes regroupés par niveau
const artistsGrouped = await getArtistsGroupedByType(currentLocale);

// Ordre d'affichage des niveaux
const typeOrder = ["Represented", "Exhibited", "Exclusive", "Collection"];

---

<Layout title={title} description={description}>
  <main class="main-container mt-16 lg:mt-34">
    <h1 class="text-4xl my-8">{title}</h1>
  	{typeOrder.map((type) => {
      
      const artists = artistsGrouped[type];
      if (!artists || artists.length === 0) return null;
      
      return (
        <section class="mb-16">
          <h2 class="text-2xl font-medium mb-8 border-b border-gray-300 pb-4">
            {t(`pageArtists.artistTypes.${type.toLowerCase().replace(/[-\s]/g, '_')}`)}
          </h2>
          <div class="grid gap-10 sm:grid-cols-2 lg:grid-cols-4">
            {artists.map((artist, index) => (
              <ArtistCard 
                artist={artist} 
                currentLocale={currentLocale}
                priority={index < 4}
              />
            ))}
          </div>
        </section>
      );
    })}
  </main>
</Layout>