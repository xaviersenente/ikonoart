---
import Layout from "../../../layouts/Layout.astro";
import ArtworkCard from '../../../components/ArtworkCard.astro';
import ExhibitionCard from '../../../components/ExhibitionCard.astro';
import ImageCockpit from '../../../components/ImageCockpit.astro';
import Carousel from '../../../components/Carousel.astro';
import SectionTitle from '../../../components/SectionTitle.astro';
import { languages } from '../../../i18n/ui';
import { useTranslations, getCurrentLocale } from '../../../i18n/utils';
import { 
  getArtists, 
  getArtistById, 
  getArtworksByArtist, 
  getExhibitionsByArtist,
  groupAchievementsByCategoryAndYear 
} from "../../../services/collections";

import type { Artist } from '../../../types/types';
import type { Locale } from '../../../i18n/ui';

// Fonction pour générer les chemins statiques pour chaque artiste et langue
export async function getStaticPaths() {
  const artists: Artist[] = await getArtists();
  
  return artists.flatMap((artist) =>
    Object.keys(languages).map((lang) => ({
      params: { lang, artist_slug: artist.slug },
      props: { artist_id: artist._id },
    }))
  );
}

// Définition des types pour Astro.params et Astro.props
const { artist_slug, lang } = Astro.params as { artist_slug: string; lang: string };
const { artist_id } = Astro.props as { artist_id: string };

const currentLocale: Locale = getCurrentLocale(lang as Locale);
const t = useTranslations(currentLocale);

// Récupération des données
const artist: Artist | null = await getArtistById(artist_id, currentLocale);
const { standard: standardArtworks, limitedEdition: limitedEditionArtworks } 
  = await getArtworksByArtist(artist_id, currentLocale);
const exhibitions = await getExhibitionsByArtist(artist_id, currentLocale);
// Regroupement des achievements
const groupedAchievements = groupAchievementsByCategoryAndYear(artist);

console.log(exhibitions);

---

<Layout title={ artist?.name?? "Artist" } currentLocale={currentLocale}>
  <main class="main-container mt-16 lg:mt-34">
    <div class="py-4 my-6 flex flex-col gap-4 z-10 lg:flex-row lg:justify-between lg:items-center border-b border-gray-300 bg-white transition duration-300" id="menu-artist">
      <div>
        <h1 class="text-2xl font-medium lg:text-4xl">{ artist?.name }</h1>
        
          <p>{artist?.birthyear} - {(artist?.deathyear) && (artist?.deathyear)}</p>
        
        {artist?.categorySet && artist.categorySet.length > 0 && (
          <p>{artist.categorySet.map((item, index) => item.category).join(", ")}</p>
        )} 
      </div>
      <nav class="text-sm uppercase text-gray-500 lg:self-end ">
        <ul class="flex gap-4 overflow-x-auto *:flex-none" >
          { artist?.statement && (
            <li><a class="block transition duration-300" href="#statement">{t('pageArtists.statement')}</a></li>
          )}
          { standardArtworks.length > 0 && (
            <li><a class="block transition duration-300" href="#works">{t('pageArtists.works')}</a></li>
          )}
          { limitedEditionArtworks.length > 0 && (
            <li><a class="block transition duration-300" href="#limited-edition">{t('pageArtists.limitedEditions')}</a></li>
          )}
          { artist?.biography && (
            <li><a class="block transition duration-300" href="#biography">{t('pageArtists.biography')}</a></li>
          )}
          { groupedAchievements && Object.entries(groupedAchievements).length > 0 && (
            <li><a class="block transition duration-300" href="#achievements">{t('pageArtists.achievements')}</a></li>
          )}
          { exhibitions.length > 0 && (
            <li><a class="block transition duration-300" href="#exhibitions">{t('pageArtists.exhibitions')}</a></li>
          )}
        </ul>
      </nav>
    </div>
    {artist?.carousel && artist?.carousel.length > 0 && (
      <Carousel 
        images={artist?.carousel} 
        type="fade" 
        class=""
      />
    )}
    
    { (artist?.image || artist?.statement) && (
      <section class="grid gap-10 lg:grid-cols-3 mt-20 scroll-mt-40" id="statement">
        { artist?.image && (
          <ImageCockpit 
            image={artist.image} 
            width={600} 
            height={600} 
            legend={true}
          />
        )}
        { artist?.statement && (
          <div class="space-y-3 md:columns-2 md:gap-10 lg:col-span-2" set:html={artist.statement}></div>
        )}
      </section>
    )}
  
    {standardArtworks.length > 0 && ( 
      <section class="scroll-mt-40" id="works">
        <SectionTitle currentLocale={currentLocale} text="pageArtists.works"/>
        <div class="card-grid">
          {standardArtworks.map((artwork, index) => (
            <ArtworkCard 
              artwork={artwork} 
              currentLocale={currentLocale}
              priority={false}
            />
          ))}
        </div>
      </section>
    )}
  
    {limitedEditionArtworks.length > 0 && ( 
      <section class="scroll-mt-40" id="limited-edition">
        <SectionTitle currentLocale={currentLocale} text="pageArtists.limitedEdition"/>
        <div class="card-grid">
          {limitedEditionArtworks.map((artwork, index) => (
            <ArtworkCard 
              artwork={artwork} 
              currentLocale={currentLocale}
              priority={false}
            />
          ))}
        </div>
      </section>
    )}

    { artist?.biography && (
      <section class="scroll-mt-40" id="biography">
        <SectionTitle currentLocale={currentLocale} text="pageArtists.biography"/>
        <div class="lg:columns-2 lg:gap-8" set:html={ artist?.biography }></div>
      </section>
    )}
  
    {groupedAchievements && Object.entries(groupedAchievements).length > 0 && (
      <section class="scroll-mt-40" id="achievements">
        <SectionTitle currentLocale={currentLocale} text="pageArtists.achievements"/>
        <div class="grid md:grid-cols-2 gap-10">
          {Object.entries(groupedAchievements).map(([category, years]) => (
            <div>
              <h2 class="text-xl my-4">{category}</h2>
              {Object.keys(years)
                .sort((a, b) => Number(b) - Number(a)) // Tri décroissant des années
                .map((year) => (
                  <div class="flex gap-4 mb-2">
                    <h3 class="basis-12">{year}</h3>
                    <ul class="list-disc pl-2">
                      {years[Number(year)]
                        // .sort((a, b) => a.title.localeCompare(b.title)) // Trier les titres si nécessaire
                        .map((achievement) => (
                          <li>{achievement.title}</li>
                        ))}
                    </ul>
                  </div>
                ))}
            </div>
          ))}
        </div>
      </section>
    )}
    {exhibitions.length > 0 && ( 
      <section class="scroll-mt-40" id="exhibitions">
        <SectionTitle currentLocale={currentLocale} text="pageArtists.exhibitions"/>
        <div class="card-grid">
          {exhibitions.map((exhibition, index) => (
            <ExhibitionCard 
              exhibition={exhibition} 
              currentLocale={currentLocale}
              priority={false}
            />
          ))}
        </div>
      </section>
    )}
  </main>

</Layout>

<script>
import '../../../js/splide-manager.js';

document.addEventListener('astro:page-load', () => {
  const siteHeader = document.getElementById('menu-artist');
  const navLinks = document.querySelectorAll('#menu-artist nav a');
  const sections = document.querySelectorAll('section[id]');
  
  if (!siteHeader || !sections.length) return;
  
  // Fonction pour gérer la barre de navigation fixe
  function handleStickyHeader() {
    const isScrolled = window.scrollY > 50;
    siteHeader.classList.toggle('sticky', isScrolled);
    siteHeader.classList.toggle('top-[72px]', isScrolled);
  }
  
  // Fonction pour mettre à jour l'état actif des liens
  function updateActiveLinks() {
    // Récupérer la position de défilement actuelle avec une marge pour l'activation précoce
    const scrollPosition = window.scrollY + 160;
    
    // Vérifier chaque section
    sections.forEach(section => {
      const sectionTop = section.offsetTop;
      const sectionHeight = section.offsetHeight;
      const sectionId = section.getAttribute('id');
      
      // Si la position de défilement est dans cette section
      if (scrollPosition >= sectionTop && scrollPosition < sectionTop + sectionHeight) {
        // Désactiver tous les liens
        navLinks.forEach(link => {
          link.classList.remove('text-black');
        });
        
        // Activer le lien correspondant
        const activeLink = document.querySelector(`#menu-artist nav a[href="#${sectionId}"]`);
        if (activeLink) {
          activeLink.classList.add('text-black');
        }
      }
    });
  }
  
  // Ajouter les écouteurs d'événements
  window.addEventListener('scroll', () => {
    handleStickyHeader();
    updateActiveLinks();
  });
  
  // Exécuter une fois au chargement de la page
  updateActiveLinks();
});
</script>