---
import { languages, defaultLang } from '../i18n/ui';
import { getCurrentLocale } from '../i18n/utils';
import type { Locale } from '../i18n/ui';

// Utilisation des utilitaires existants pour une meilleure cohérence
const currentLang: Locale = getCurrentLocale(Astro.currentLocale);
const currentPath: string = Astro.url.pathname.split('/').slice(2).join('/');

// Récupération des langues disponibles directement depuis ui.ts
const availableLanguages: Locale[] = Object.keys(languages) as Locale[];
const otherLang: Locale = availableLanguages.find((lang: Locale) => lang !== currentLang) || defaultLang;

// Construction de l'URL alternative avec nettoyage
const langUrl: string = `/${otherLang}/${currentPath || ''}`
  .replace(/\/+/g, '/')
  .replace(/\/$/, '') || `/${otherLang}`;

// Utilisation directe des noms depuis ui.ts
const otherLangDisplayName: string = languages[otherLang];
---

<a 
  href={langUrl} 
  lang={otherLang}
  class="relative inline-block transition-colors duration-300 hover:text-gray-600"
  aria-label={`Switch to ${otherLangDisplayName} version`}
  title={`View page in ${otherLangDisplayName}`}
>
  {otherLangDisplayName}
</a>