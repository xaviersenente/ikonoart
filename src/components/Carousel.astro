---
// src/components/Carousel.astro - Version étendue pour contenu personnalisé
import ImageCockpit from './ImageCockpit.astro';

interface CarouselImage {
  _id: string;
  altText?: string;
  width?: number;
  height?: number;
  resize?: string;
}

interface Props {
  images?: CarouselImage[];
  type?: 'fade' | 'home' | 'product' | 'testimonial';
  class?: string;
  lazy?: boolean;
  priority?: boolean;
  ariaLabel?: string;
  showPagination?: boolean;
  showArrows?: boolean;
  customConfig?: Record<string, any>;
  // Nouvelle propriété pour le contenu personnalisé
  customContent?: boolean;
}

const { 
  images = [],
  type = 'fade',
  class: additionalClasses = '',
  lazy = true,
  priority = false,
  ariaLabel,
  showPagination,
  showArrows,
  customConfig = {},
  customContent = false
} = Astro.props;

// Si customContent est true, on ne valide pas les images
if (!customContent && (!images || images.length === 0)) {
  console.warn('Carousel: Aucune image fournie');
  return null;
}

// Déterminer la classe CSS et les configurations par défaut selon le type
const getCarouselConfig = (type: string) => {
  const configs = {
    'fade': {
      class: 'fade-carousel',
      defaultAriaLabel: 'Carrousel d\'images en fondu',
      showPagination: showPagination ?? true,
      showArrows: showArrows ?? false,
      imageConfig: { width: 1800, height: 750, quality: 75 }
    },
    'home': {
      class: 'home-carousel',
      defaultAriaLabel: 'Carrousel d\'éléments de la page d\'accueil',
      showPagination: showPagination ?? false,
      showArrows: showArrows ?? true,
      imageConfig: { width: 600, height: 600, quality: 70 }
    },
    'product': {
      class: 'product-carousel',
      defaultAriaLabel: 'Carrousel de produits',
      showPagination: showPagination ?? false,
      showArrows: showArrows ?? true,
      imageConfig: { width: 500, height: 500, quality: 80 }
    },
    'testimonial': {
      class: 'testimonial-carousel',
      defaultAriaLabel: 'Carrousel de témoignages',
      showPagination: showPagination ?? true,
      showArrows: showArrows ?? false,
      imageConfig: { width: 400, height: 400, quality: 65 }
    }
  };
  
  return configs[type] || configs['fade'];
};

const config = getCarouselConfig(type);
const carouselClass = config.class;
const finalAriaLabel = ariaLabel || config.defaultAriaLabel;

// Configuration des images selon le type de carousel (seulement si pas de contenu personnalisé)
const imageConfig = config.imageConfig;

// Générer un ID unique pour le carousel
const carouselId = `carousel-${Math.random().toString(36).substr(2, 9)}`;

// Configuration JSON pour le data-splide
const splideConfig = Object.keys(customConfig).length > 0 
  ? JSON.stringify(customConfig) 
  : undefined;
---

<!-- <div 
  class={`splide ${carouselClass} ${additionalClasses}`} 
  role="group" 
  aria-label="Carrousel d'images"
>
  <div class="splide__track">
    <ul class="splide__list">
      {images.map((image) => (
        <li class="splide__slide">
          <ImageCockpit 
            image={{ _id: image._id, altText: image.altText }} 
            width={1800} 
            height={750} 
            resize={image.resize || "thumbnail"} 
            classes="w-full h-auto object-cover" 
          />
        </li>
      ))}
    </ul>
  </div>
</div> -->


<div 
  id={carouselId}
  class={`splide ${carouselClass} ${additionalClasses}`} 
  role="group" 
  aria-label={finalAriaLabel}
  aria-roledescription="carousel"
  data-splide={splideConfig}
  data-carousel-type={type}
  data-images-count={customContent ? 'custom' : images.length}
>
  <div class="splide__track">
    <ul class="splide__list">
      {customContent ? (
        // Slot pour contenu personnalisé
        <slot />
      ) : (
        // Contenu d'images par défaut
        images.map((image, index) => {
          const isFirstImage = index === 0;
          const shouldPrioritize = priority && isFirstImage;
          const shouldLazy = lazy && !shouldPrioritize;
          
          return (
            <li 
              class="splide__slide" 
              role="group" 
              aria-roledescription="slide"
              aria-label={`${index + 1} sur ${images.length}`}
            >
              <ImageCockpit 
                image={{ _id: image._id, altText: image.altText }} 
                width={imageConfig.width} 
                height={imageConfig.height} 
                quality={imageConfig.quality}
                resize={image.resize || "bestFit"} 
                priority={shouldPrioritize}
                lazy={shouldLazy}
                sizes={type === 'fade' 
                  ? "(max-width: 640px) 100vw, (max-width: 1024px) 100vw, 100vw"
                  : "(max-width: 640px) 100vw, (max-width: 1024px) 50vw, 33vw"
                }
                classes={`w-full h-auto object-cover ${type === 'fade' ? 'aspect-[16/9]' : 'aspect-square'}`}
              />
              
              {type === 'fade' && image.title && (
                <div class="absolute inset-0 bg-gradient-to-t from-black/50 to-transparent flex items-end">
                  <div class="p-6 text-white">
                    <h3 class="text-xl font-semibold mb-2">{image.title}</h3>
                    {image.description && (
                      <p class="text-sm opacity-90">{image.description}</p>
                    )}
                  </div>
                </div>
              )}
            </li>
          );
        })
      )}
    </ul>
  </div>

  <!-- Flèches de navigation (conditionnelles) -->
  {config.showArrows && (
    <div class="splide__arrows">
      {/* <button 
        class="splide__arrow splide__arrow--prev"
        type="button" 
        aria-label="Previous slide"
      >
        <svg 
          xmlns="http://www.w3.org/2000/svg" 
          width="40" 
          height="40" 
          viewBox="0 0 40 40" 
          aria-hidden="true"
        >
          <path d="m15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z"></path>
        </svg>
      </button>
      <button 
        class="splide__arrow splide__arrow--next"
        type="button" 
        aria-label="Next slide"
      >
        <svg 
          xmlns="http://www.w3.org/2000/svg" 
          width="40" 
          height="40" 
          viewBox="0 0 40 40" 
          aria-hidden="true"
        >
          <path d="m15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z"></path>
        </svg>
      </button> */}
    </div>
  )}

  <!-- Pagination (conditionnelle) -->
  {config.showPagination && (
    <ul class="splide__pagination" role="tablist" aria-label="Sélectionner un élément"></ul>
  )}

  <!-- Indicateur de progression pour les carousels autoplay -->
  {type === 'fade' && (
    <div class="splide__progress" aria-hidden="true">
      <div class="splide__progress__bar"></div>
    </div>
  )}
</div>

<!-- Styles CSS personnalisés pour les améliorations visuelles -->
 <style is:global>
  .splide__arrow {
    background: transparent;
  }
 </style>
<!-- <style>
  /* Styles pour les flèches personnalisées */
  .splide__arrow {
    @apply bg-white backdrop-blur-sm rounded-full p-2 shadow-lg;
    @apply hover:bg-white transition-all duration-200;
    @apply disabled:opacity-30 disabled:cursor-not-allowed;
    width: 3rem;
    height: 3rem;
  }

  .splide__arrow svg {
    @apply w-5 h-5 text-gray-800;
  }

  .splide__arrow--prev {
    left: 1rem;
  }

  .splide__arrow--next {
    right: 1rem;
  }

  /* Styles pour la pagination */
  .splide__pagination {
    @apply flex justify-center gap-2 mt-6;
  }

  .splide__pagination__page {
    @apply w-3 h-3 rounded-full bg-gray-300 transition-all duration-200;
    @apply hover:bg-gray-400 focus:bg-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500;
  }

  .splide__pagination__page.is-active {
    @apply bg-blue-600 scale-110;
  }

  /* Barre de progression pour les carousels autoplay */
  .splide__progress {
    @apply absolute bottom-0 left-0 right-0 h-1 bg-gray-200/50;
  }

  .splide__progress__bar {
    @apply h-full bg-blue-600 transition-all duration-100 ease-linear;
    width: 0%;
  }

  /* Styles pour les différents types de carousels */
  .fade-carousel {
    @apply relative overflow-hidden rounded-lg;
  }

  .fade-carousel .splide__slide {
    @apply opacity-0 transition-opacity duration-500;
  }

  .fade-carousel .splide__slide.is-active {
    @apply opacity-100;
  }

  .home-carousel {
    @apply px-4;
  }

  .home-carousel .splide__slide {
    @apply px-2;
  }

  .product-carousel .splide__slide {
    @apply border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow duration-200;
  }

  /* Animations d'entrée */
  .splide__slide {
    @apply transform transition-transform duration-300 ease-out;
  }

  .splide__slide:not(.is-visible) {
    @apply scale-95 opacity-75;
  }

  .splide__slide.is-visible {
    @apply scale-100 opacity-100;
  }

  /* Responsive design pour les flèches */
  @media (max-width: 768px) {
    .splide__arrow {
      @apply w-8 h-8 p-1;
    }
    
    .splide__arrow svg {
      @apply w-4 h-4;
    }
  }

  /* Mode sombre (si utilisé) */
  @media (prefers-color-scheme: dark) {
    .splide__arrow {
      @apply bg-gray-800/80 hover:bg-gray-800;
    }
    
    .splide__arrow svg {
      @apply text-white;
    }
    
    .splide__pagination__page {
      @apply bg-gray-600 hover:bg-gray-500;
    }
  }
</style> -->

<!-- Script de configuration additionnelle si nécessaire -->
<!-- <script>
  // Configuration spécifique post-initialisation si nécessaire
  document.addEventListener('DOMContentLoaded', () => {
    // Gestion des événements keyboard supplémentaires
    const carousels = document.querySelectorAll('.splide');
    
    carousels.forEach(carousel => {
      carousel.addEventListener('keydown', (e) => {
        if (e.key === 'Home') {
          e.preventDefault();
          // Aller à la première slide
          const splideInstance = carousel.splide;
          if (splideInstance) {
            splideInstance.go(0);
          }
        } else if (e.key === 'End') {
          e.preventDefault();
          // Aller à la dernière slide
          const splideInstance = carousel.splide;
          if (splideInstance) {
            splideInstance.go(-1);
          }
        }
      });
    });
  });
</script> -->